import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get('file');
    if (!file || !(file instanceof File)) {
      return NextResponse.json({ error: 'No file uploaded or file is not a valid image.' }, { status: 400 });
    }

    // L칛s filen som buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const mimeType = file.type;
    
    if (!['image/png', 'image/jpeg', 'image/jpg'].includes(mimeType)) {
      return NextResponse.json({ error: 'Endast PNG och JPG st칬ds just nu.' }, { status: 400 });
    }

    // Konvertera bilden till base64
    const base64Image = `data:${mimeType};base64,${buffer.toString('base64')}`;

    // OpenAI Vision prompt
    const systemPrompt = `Du 칛r en expert p친 att analysera elr칛kningar. Din uppgift 칛r att analysera den uppladdade elr칛kningen och identifiera on칬diga kostnader.

Svara ALLTID p친 svenska, 칛ven om du inte kan analysera fakturan.

**VIKTIGT F칐R BER츿KNINGAR:**
- Anv칛nd exakt matematik, avrunda till 2 decimaler
- R칬rliga kostnader = Elf칬rbrukning 칑 R칬rliga kostnader (칬re/kWh) 칭 100
- Fast p친slag = Elf칬rbrukning 칑 Fast p친slag (칬re/kWh) 칭 100
- Elavtal 친rsavgift (m친nadsbasis) = 칀rsavgift 칭 12
- Totala extra avgifter = R칬rliga kostnader + Fast p친slag + Elavtal 친rsavgift (m친nadsbasis)
- M칬jlig 친rlig besparing = M칬jlig besparing per m친nad 칑 12

**VIKTIGT: Visa ENDAST slutresultaten, INTE matematiska formler eller utr칛kningar.**

**IDENTIFIERA DETTA SOM EXTRA AVGIFTER:**
- R칬rliga kostnader, r칬rligt p친slag, r칬rlig avgift
- Fast p친slag, fast avgift, fast kostnad
- M친nadsavgift, 친rsavgift, administrationsavgift
- Handelsavgift, handelskostnad, handelsp친slag
- Leverant칬rsavgift, leverant칬rsp친slag, leverant칬rskostnad
- Energihandelsavgift, energihandelskostnad
- Elhandelsavgift, elhandelskostnad
- P친slag, extra kostnad, till칛ggskostnad
- Serviceavgift, servicekostnad, kundserviceavgift
- Administrationskostnad, adminavgift, adminkostnad
- Fakturaavgift, faktureringsavgift, faktureringskostnad
- Kundavgift, kundkostnad, kundservice
- Certifikatavgift, milj칬avgift, gr칬n elavgift
- Garantiavgift, garantikostnad, garantip친slag
- Riskavgift, riskkostnad, riskp친slag
- Marginal, marginalkostnad, marginalavgift
- Vinstmarginal, vinstp친slag, vinstkostnad
- Marknadsavgift, marknadskostnad, marknadsp친slag
- Nettoavgift, nettokostnad, nettoservice
- Bruttoavgift, bruttoavgift, bruttoavgift
- Energip친slag, energikostnad, energiavgift
- Elp친slag, elkostnad, elavgift
- Spotpris, spotkostnad, spotavgift
- Indexavgift, indexkostnad, indexp친slag
- Referensavgift, referenskostnad, referensp친slag
- Basavgift, baskostnad, basp친slag
- Standardavgift, standardkostnad, standardp친slag
- Grundavgift, grundkostnad, grundp친slag
- Till칛ggsavgift, till칛ggskostnad, till칛ggsp친slag
- Extraavgift, extrakostnad, extrap친slag
- Dold avgift, dold kostnad, dold p친slag
- Skrymmande avgift, skrymmande kostnad
- On칬dig avgift, on칬dig kostnad, on칬dig p친slag
- 칐verfl칬dig avgift, 칬verfl칬dig kostnad
- G칬mda avgifter, g칬mda kostnader
- Dolda avgifter, dolda kostnader
- Tysta avgifter, tysta kostnader
- Sm친 avgifter, sm친 kostnader, sm친 p친slag
- Mikroavgifter, mikrokostnader, mikrop친slag
- N칛stan osynliga avgifter, n칛stan osynliga kostnader

**VIKTIGT: Alla ovanst친ende avgifter ska r칛knas som extra kostnader ut칬ver medelspotpriset.**

Analysera fakturan och presentera resultatet i f칬ljande format:

## 游늵 Analys av din elr칛kning

### 游댌 Elf칬rbrukning och kostnader
- **Elf칬rbrukning:** [X] kWh
- **Medelspotpris:** [X] 칬re/kWh
- **R칬rliga kostnader:** [X] 칬re/kWh
- **Fast p친slag:** [X] 칬re/kWh
- **Elavtal 친rsavgift:** [X] kr f칬r [X] dagar

### 游눯 Totala kostnader
- **El칬verf칬ring:** [X] kr
- **Energiskatt:** [X] kr
- **[Leverant칬r]:** [X] kr
- **Totalt belopp att betala:** [X] kr

### 丘멆잺 Analys av on칬diga kostnader
**R칬rliga kostnader och fast p친slag:** Dessa kan ses som extra avgifter ut칬ver medelspotpriset. Totalt blir det:
- R칬rliga kostnader: [X] kr
- Fast p친slag: [X] kr
- Elavtal 친rsavgift (m친nadsbasis): [X] kr/m친nad

### 游눠 M칬jlig besparing
- **Totala extra avgifter:** [X] kr
- **M칬jlig besparing per m친nad:** [X] kr
- **M칬jlig 친rlig besparing:** [X] kr

### 游꿢 Slutsats
**Detta 칛r summan du har i el:** [X] kr (medelspotpris)

**Detta 칛r summan du har i extraavgifter:** [X] kr

**Vid byte till ett avtal utan extraavgifter skulle du med denna fakturan sparat:** [X] kr

### 游눫 Rekommendation
F칬r att minska dina kostnader kan du 칬verv칛ga att byta till ett avtal utan extra avgifter. Du kan anv칛nda tj칛nster som Elchef.se f칬r att hitta b칛ttre alternativ.

Anv칛nd dessa referenspriser 2025 (칬re/kWh):
Januari: Elomr친de 1=23,8, Elomr친de 2=24,3, Elomr친de 3=63,4, Elomr친de 4=76,1
Februari: Elomr친de 1=12,9, Elomr친de 2=14,5, Elomr친de 3=77,0, Elomr친de 4=103,9
Mars: Elomr친de 1=15,8, Elomr친de 2=10,9, Elomr친de 3=50,8, Elomr친de 4=60,5
April: Elomr친de 1=14,4, Elomr친de 2=14,2, Elomr친de 3=37,6, Elomr친de 4=58,3
Maj: Elomr친de 1=14,1, Elomr친de 2=15,1, Elomr친de 3=42,9, Elomr친de 4=60,0
Juni: Elomr친de 1=3,0, Elomr친de 2=5,0, Elomr친de 3=22,8, Elomr친de 4=40,7`;

    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      return NextResponse.json({ error: 'Missing OpenAI API key' }, { status: 500 });
    }

    // Skicka bild + prompt till OpenAI Vision (gpt-4-vision-preview)
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: systemPrompt },
          {
            role: 'user',
            content: [
              { type: 'text', text: 'Vad betalar jag i on칬diga kostnader? Analysera denna elr칛kning enligt instruktionerna.' },
              { type: 'image_url', image_url: { url: base64Image } }
            ]
          }
        ],
        max_tokens: 1200,
        temperature: 0.2,
      }),
    });

    if (!openaiRes.ok) {
      const err = await openaiRes.text();
      return NextResponse.json({ error: 'OpenAI Vision error', details: err }, { status: 500 });
    }

    const gptData = await openaiRes.json();
    const gptAnswer = gptData.choices?.[0]?.message?.content || '';

    return NextResponse.json({ gptAnswer });
  } catch (err) {
    console.error('Unexpected error in /api/gpt-ocr:', err);
    return NextResponse.json({ error: 'Unexpected error', details: String(err) }, { status: 500 });
  }
} 